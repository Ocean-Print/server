generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrantType {
  IP
  PASSWORD
  CARD
}

model Grant {
  id          Int       @id @default(autoincrement())
  type        GrantType
  name        String    @unique
  data        String
  /// ![string]
  permissions Json[]    @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, data])
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  role     String?
  notes    String    @default("")
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           Int    @id @default(autoincrement())
  name         String
  notes        String @default("")
  hash         String
  file         String
  printerModel String
  printTime    Int

  /// ![{ id: number; name: string; type: string; usage: number; color: string; }]
  materials Json[] @default([])

  user   User  @relation(fields: [userId], references: [id])
  userId Int
  jobs   Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobState {
  QUEUED
  DISPATCHING
  PRINTING
  FAILED
  COMPLETED
}

model Job {
  id       Int      @id @default(autoincrement())
  state    JobState @default(QUEUED)
  priority Int      @default(0)

  project        Project  @relation(fields: [projectId], references: [id])
  projectId      Int
  currentPrinter Printer?
  printer        Printer? @relation("jobs", fields: [printerId], references: [id])
  printerId      Int?

  createdAt DateTime  @default(now())
  startedAt DateTime?
  endedAt   DateTime?
}

model Printer {
  id        Int     @id @default(autoincrement())
  name      String
  type      String
  notes     String  @default("")
  isEnabled Boolean @default(true)

  /// ![{ host: string, serial: string; accessCode: string; }]
  options       Json   @default("{}")
  /// ![{ type: string; color: string; }]
  materials     Json[] @default([])
  /// ![{ state: "UNKNOWN" | "ERROR" | "GOOD" | "UPDATING" | "DISPATCHING"; errors: Array<{name: string, message: string}>; progress: number; isClear: boolean; }]
  systemStatus  Json   @default("{}")
  /// ![{ state: "UNKNOWN" | "IDLE" | "PRINTING" | "PAUSED" | "FINISHED"; errors: Array<{name: string, message: string}>; currentJobName: string; progress: number; timeRemaining: number; }]
  printerStatus Json   @default("{}")

  currentJob   Job?  @relation(fields: [currentJobId], references: [id])
  currentJobId Int?  @unique
  jobs         Job[] @relation("jobs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
